"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

type Assessment {
  proposedDate: DateTime
  submittedOn: DateTime!
  requiresScheduling: Boolean
  published: Boolean
  readyForPublishing: Boolean
  publishedAt: DateTime
  proposalStatus: ProposalStatus!
  assessmentStatus: AssessmentStatus
  assessmentStyle: AssessmentStyle!
  assessmentType: AssessmentType!
  examinationForms: [ExaminationForm!]!
  proposalText: String
  grade: Float
  assessmentProtocol: String
  internalNotes: String
  externalFeedback: String
  earlyAssessmentProposal: String
  attempt: Int!
  examinationOfficeNotes: String
  project: Project
  learningUnit: EventGroup
  semesterModule: SemesterModule
  semester: Semester
  assessor: User
  module: Module
  userHandins: [UserHandin]
  event: Event
  user: User
  assistant: User

  """Status of this assessment indicated to ..."""
  manageStatus: String

  """Get the latest attempt on the module linked to this assessment"""
  latestAttempt: Assessment

  """List all previous attempts on the module linked to this assessment"""
  previousAttempts: [Assessment!]

  """Indicates whether or not this assessment is an early registration"""
  canEarlyAssess: Boolean
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input AssessmentCreateInput {
  proposalText: String
  projectId: ID
  eventGroupId: ID
  examinationForms: [ExaminationForm!]
  assessmentType: AssessmentType
}

input AssessmentDetailsEditInput {
  grade: Float
  examinationOfficeNotes: String
  externalFeedback: String
  startTime: DateTime
  endTime: DateTime
}

input AssessmentEditInput {
  internalNotes: String
  externalFeedback: String
  grade: Float
}

input AssessmentFilter {
  """Fulltext search string"""
  search: String

  """Filter assessments by assessed student"""
  student: ID

  """Filter assessments by module(s)"""
  modules: [ID]

  """Filter assessments by semester module"""
  semesterModule: ID

  """Filter assessments by semester"""
  semester: ID

  """Filter assessments by status"""
  status: AssessmentStatus

  """Filter assessments by grade(fail or not fail)"""
  grade: String

  """Filter assessments by their style"""
  assessmentStyle: AssessmentStyle

  """Filter assessments by their type"""
  assessmentType: AssessmentType

  """Filter assessments by their publish status"""
  published: String

  """Filter assessments by their event's date"""
  date: String
}

input AssessmentInput {
  student: ID!
  semester: ID!
  project: ID
  learningUnit: ID
  assessor: ID!
  assistant: ID
  assessmentType: AssessmentType!
  module: ID!
  registrationStatus: ProposalStatus!
  assessmentStatus: AssessmentStatus
  grade: Float!
  assessmentStyle: AssessmentStyle!
  externalFeedback: String
  internalNotes: String
  examinationOfficeNotes: String!
  published: Boolean
  readyForPublishing: Boolean
  addModuleHandins: Boolean
  startTime: DateTime
  endTime: DateTime
  submittedOn: DateTime
}

input AssessmentProposalInput {
  assistantId: ID
  location: String
  startTime: DateTime
  handinDeadline: DateTime
  handinId: ID
  examinationForms: [ExaminationForm]
}

"""Includes the number of assessmetns present, categorized by type"""
type AssessmentStatistics {
  """Number of standard assessment registrations"""
  standardRegistrations: Int

  """Number of alternative assessment registrations"""
  alternativeRegistrations: Int

  """Number of sts assessment registrations"""
  stsRegistrations: Int

  """Number of foundation assessment registrations"""
  foundationRegistrations: Int

  """Number of revoked assessment registrations"""
  revokedRegistrations: Int

  """Number of assessments that still need approval by the coordinator"""
  openAlternativeProposals: Int
}

"""Possible stati for `Assessment` end stages"""
enum AssessmentStatus {
  """
  The student has handed in all needed assessment materials and/or was present at the oral assessment
  """
  PRESENT

  """
  The student has not handed in the required materials and further review is
  required to see whether they were excused or not
  """
  ABSENT

  """
  Even though the student has failed to hand in the requried materials/appear in
  the oral assesment, they were excused and as such the assessment is not
  counted against their maximum tries
  """
  EXCUSED

  """
  The student failed to provide the requested assesment materials/appear in
  person without providing a valid excuse. As such the assessment is an automtic fail
  """
  NOT_EXCUSED
}

"""
Possible `Assessment` styles, representing the different ways of regsitering/applying for an `Assessment`
"""
enum AssessmentStyle {
  STANDARD
  ALTERNATIVE
  FOUNDATION
  STS
}

"""
Possible types of assessments, mostly relevant for `Assessment`s happening outside the regular phases
"""
enum AssessmentType {
  NORMAL
  EARLY
  REASSESSMENT
  PRIOR_LEARNING
  LEVEL_UP
}

type AuditEntry {
  affectedResource: String!
  author: String!
  source: String!
  before: JSON
  after: JSON
  method: AuditMethod!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""Possible Methods an Audit Entry can be caused by"""
enum AuditMethod {
  CREATE
  UPDATE
  DELETE
}

type AuthPayload {
  token: String
}

input AwsKeyList {
  key: String
}

type BugReport {
  id: ID
  body: String
  title: String
  state: String
  createdAt: String
}

input CreateProjectInput {
  title: String!
  coverUrl: String
  description: String!
  outline: String!
  sponsor: ID
  isLookingForTeammates: Boolean!
  tags: [String!]
  semesters: [String!]!
  teamMembers: [ProjectTeamMemberInput!]!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Department {
  name: String!
  abbreviation: String!
  description: String
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
Statistic that holds information about some particular ects that was collected within a semester/period
"""
type EctsStatistic {
  """The semester the ects were collected in"""
  semester: String

  """The amount of ects credits that were collected"""
  count: Int

  """
  The percent the collected ects credits represent out of the total ects required to graduate
  """
  percent: Float
}

type Event {
  title: String!
  description: String!
  startTime: DateTime!
  endTime: DateTime!
  allDay: Boolean
  creatorEmail: String!
  iCalUid: String!
  location: String!

  """List of users not attending this event"""
  signedOutMembers: [User!]!

  """Host of this event"""
  host: User

  """
  Get details of the next event within the container event group that will be happening
  """
  nextEventForGroup: EventGroup

  """List attendance data for this event"""
  attendances: [EventAttendance!]!
  eventGroupId: String

  """Event group containin this event"""
  eventGroup: EventGroup

  """
  Whether or not the currently logged in user edit the attendance data of this event
  """
  canEditAttendances: Boolean

  """Whether or not the currently logged in user can leave this event"""
  canLeave: Boolean!

  """Whether or not the currently logged in user can join this event"""
  canJoin: Boolean!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EventAttendance {
  status: EventAttendanceStatus!
  hasLeft: Boolean!
  attendee: User
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum EventAttendanceStatus {
  UNKNOWN
  PRESENT
  EXCUSED
  ABSENT
}

type EventGroup {
  imageUrl: String
  title: String!
  description: String!
  isHidden: Boolean
  type: EventGroupType!
  category: EventGroupCategory
  visibility: EventGroupVisibility
  participants: [EventGroupParticipations]!
  maxParticipants: Int!
  slackLink: String

  """Next event within this event group that is taking place"""
  nextEvent: Event

  """Number of events in this event group which have not taken place yet"""
  futureEventCount: Int!

  """List organizers and hosts of this event group"""
  organizersAndHosts: [User!]
  department: Department
  organizers: [User!]!
  modules: [SemesterModule!]!
  events: [Event!]

  """List events that are colliding with events in this event group"""
  collidingEvents: [Event!]
  semester: Semester
  tags: [Tag!]

  """Number of participants attending this event group"""
  participantCount: Int!

  """Whether or not the current user can edit this event group"""
  canEdit: Boolean!

  """Whether or not the current user can register for this event group"""
  canRegister: Boolean!

  """Whether or not the current user can leave this event group"""
  canUnregister: Boolean!

  """Whether or not the current user is registered for this event group"""
  isRegistered: Boolean!

  """
  Whether or not the current user is in the waiting list of this event group
  """
  isInWaitingList: Boolean!

  """Whether or not this event group is full"""
  isEventFull: Boolean!

  """Whether or not the current user is an organizer for this event group"""
  isHost: Boolean!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum EventGroupCategory {
  CREATIVE
  CULTURE
  FOOD_AND_DRINK
  GAMES
  MOVIES_AND_TV
  SPORT
  TALK
  WELLBEING
  OTHER
}

input EventGroupFilter {
  search: String
  startDate: DateTime
  endDate: DateTime
  category: EventGroupCategory
  module: ID
  department: ID
  semester: ID
  hideFullEvents: Boolean
}

input EventGroupInput {
  title: String!
  description: String!
  semesterId: ID
  imageUrl: String
  type: EventGroupType!
  category: EventGroupCategory
  maxParticipants: Int
  department: String
  visibility: EventGroupVisibility
  isHidden: Boolean!
  modules: [String!]
  organizers: [String!]!
}

enum EventGroupParticipantsStatus {
  WAITING_LIST
  JOINED
}

type EventGroupParticipations {
  status: EventGroupParticipantsStatus!
  eventGroup: EventGroup
  participant: User
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum EventGroupType {
  ACADEMIC
  NON_ACADEMIC
}

enum EventGroupVisibility {
  ORIENTATION_STUDENT
  CORE_STUDENT
  UNRESTRICTED
}

enum ExaminationForm {
  NONE
  ORAL_OR_PRACTICAL_EXAMINATION
  WRITTEN_EXAMINATION
  LECTURE_OR_PRESENTATION
  DISCUSSION
  INTERVIEW
  WRITTEN_ELABORATION
  PROJECT_PORTFOLIO
  ELECTRONIC_ATTENDANCE_RECORD
}

"""Describes the type/category of the uploaded file."""
enum FileType {
  DOCUMENT
  PICTURE
}

type FormComponent {
  id: ID!
  index: Int
  type: HandinComponent!
  title: String
  mandatory: Boolean!
  moduleHandin: ModuleHandin
}

input FormComponentInput {
  title: String
  type: HandinComponent!
  mandatory: Boolean!
  index: Int
}

type GoogleEvent {
  eventId: ID!
  eventTitle: String
  description: String
  organizer: String
  location: String
  participate: String
  startTime: String!
  endTime: String!
  officeHourGroupId: String
  isOfficeHour: Boolean!
  isOfficeHourBooked: Boolean
}

input GoogleWeeklyEventsInput {
  startDate: DateTime
  endDate: DateTime
}

enum HandinComponent {
  DOCUMENT
  LINK
  SELF_ASSESSMENT
  SELF_ASSESSMENT_RATIONALE
  ESSAY
  COMMENT
  CHECKBOX
}

input HandinCustomDeadlineInput {
  moduleId: String
  deadline: DateTime
  index: Int
}

type HandinDeadlines {
  handinCustomDeadline: JSON
  handinIdDeadline: DateTime
  handinIsDeadline: DateTime
  handinOsDeadline: DateTime
  handinPmDeadline: DateTime
  handinSeDeadline: DateTime
  handinStsDeadline: DateTime
}

"""Information about the important dates in the semester"""
type ImportantSemesterDate {
  """A unique ID for this semester date"""
  id: ID

  """The name of this important semester date."""
  title: String

  """
  A subtitle that is used to indicate what type of date this is e.g. a deadline.
  """
  subtitle: String

  """The actual date value."""
  date: DateTime
  visibility: SemesterDateVisibility
}

input ImportantSemesterDateCreateInput {
  title: String!
  subtitle: String
  date: DateTime!
  visibility: SemesterDateVisibility!
  semesterId: ID
  semesterModuleIds: [ID!]
}

input ImportantSemesterDateFilter {
  """
  If this flag is set, the list only contains custom semester dates. Some dates are set in the
  application and others can be added dynamically. These dynamically added dates are what we
  refer to as "custom" dates.
  """
  custom: Boolean
}

type JourneyDocument {
  fileType: FileType!
  fileName: String!
  key: String!
  signedLink: String
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type LearningResource {
  title: String!
  description: String!
  link: String
  medium: ResourceMedium!
  approvedBy: User
  submittedBy: User
  modules: [Module!]!

  """
  Whether or not the currently signed in user can edit this learning resource
  """
  canEdit: Boolean

  """
  Whether or not the currently signed in user can disable this learning resource
  """
  canDisable: Boolean
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input LearningResourceFilter {
  search: String
}

input LearningResourceInput {
  title: String!
  description: String!
  medium: ResourceMedium!
  link: String
  modules: [String!]!
}

type Module {
  title: String!
  shortCode: String!
  moduleIdentifier: String
  simpleShortCode: String!
  department: Department
  content: String!
  qualificationGoals: String
  ects: Int!
  contactTime: Int
  selfStudyTime: Int
  weeklyHours: Int
  graded: Boolean
  frequency: ModuleFrequency!
  teachingFormats: [TeachingFormat!]
  examinationForms: [ExaminationForm!]
  coordinator: User
  prerequisites: [Module!]
  prerequisiteFor: [Module!]
  moduleHandbooks: [ModuleHandbookModule!]
  learningResources: [LearningResource!]!
  semesterModules: [SemesterModule!]!
  highestGrade: String
  workload: Int
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
Statistic that holds the number of assessments per module, with counts for each type
"""
type ModuleAndAssessmentProposalStatistic {
  semesterModule: SemesterModule

  """Number of early assessment proposals"""
  earlyAssessmentProposals: Int

  """Number of alternative assessment proposals"""
  alternativeAssessmentProposals: Int
}

"""
Statistic that holds the number of assessments per module, with counts for each type
"""
type ModuleAndAssessmentStatistic {
  semesterModule: SemesterModule

  """Number of standard assessment registrations"""
  standardRegistrations: Int

  """Number of alternative assessment registrations"""
  alternativeRegistrations: Int

  """Number of sts assessment registrations"""
  stsRegistrations: Int

  """Number of foundation assessment registrations"""
  foundationRegistrations: Int
}

input ModuleFilter {
  """Fulltext search string"""
  search: String

  """
  Show only modules which are mandatory/compulsory elective for the current user
  """
  onlyMandatory: Boolean

  """Show only modules belonging to the respective department"""
  department: String

  """Show only modules coordinated by the given user"""
  coordinator: ID

  """Show only modules passed by the current user"""
  passed: Boolean

  """Show only modules failed by the current user"""
  failed: Boolean
}

enum ModuleFrequency {
  YEARLY
  EVERY_SEMESTER
}

type ModuleHandbook {
  name: String!
  validFrom: DateTime!
  studyProgram: StudyProgram
  modules: [ModuleHandbookModule!]!
  students: [StudentModuleHandbook!]
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ModuleHandbookFilter {
  search: String
  department: String
}

input ModuleHandbookInput {
  name: String!
  validFrom: DateTime!
}

type ModuleHandbookModule {
  type: ModuleHandbookModuleType!
  numMandatoryElectives: Int
  electiveModules: [ModuleHandbookModule!]!
  otherElectiveModules: [ModuleHandbookModule!]!
  module: Module
  moduleHandbook: ModuleHandbook
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ModuleHandbookModuleInput {
  type: ModuleHandbookModuleType!
  numMandatoryElectives: Int
  electiveModules: [String!]!
}

enum ModuleHandbookModuleType {
  MANDATORY
  COMPULSORY_ELECTIVE
  ELECTIVE
}

type ModuleHandin {
  title: String!
  description: String
  semesterModule: SemesterModule
  eventGroup: EventGroup
  mandatory: Boolean!
  deadline: DateTime

  """Form components for the this hand-in"""
  formComponents: [FormComponent!]!
  user: User
  published: Boolean!
  userHandins: [UserHandin!]!

  """
  Permissions associated with this hand-in e.g whether or not the current user can edit this hand-in
  """
  grants: [String!]

  """Deadline for this hand-in"""
  latestHandinDeadline: DateTime
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ModuleHandinFilter {
  """Fulltext search string"""
  search: String

  """Show assessment Handins"""
  mandatory: Boolean

  """Show all Handins related to specific module"""
  module: ID

  """Show all Handins in a specific semester"""
  semester: ID
}

input ModuleHandinInput {
  title: String!
  description: String
  semesterModuleId: String
  eventGroupId: String
  setDeadline: Boolean = false
  deadline: DateTime
  mandatory: Boolean!
  formComponents: [FormComponentInput!]!
}

input ModuleInput {
  title: String!
  shortCode: String!
  content: String!
  qualificationGoals: String!
  department: String
  coordinator: String!
  graded: Boolean!
  ects: Int!
  contactTime: Int!
  selfStudyTime: Int!
  weeklyHours: Int!
  teachingFormats: [TeachingFormat!]!
  frequency: ModuleFrequency!
  examinationForms: [ExaminationForm!]!
  prerequisites: [String!]!
}

type ModuleUpdate {
  content: String!
  author: User
  semesterModule: SemesterModule
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Mutation {
  saveRecentSearchResult(resultId: ID!, resultType: RecentSearchResultType!): RecentSearchResult
  deleteSearchHistory: Boolean
  toggleAssessmentEmails(enableEmail: Boolean!): Boolean
  createModuleUpdate(semesterModuleId: ID!, data: SemesterModuleUpdateInput!): ModuleUpdate
  createProjectUpdate(data: ProjectUpdateInput!, project: ID!): ProjectUpdate!

  """
  Creates an assessment without going through the regular registration process
  """
  createAssessment(data: AssessmentInput!): Assessment

  """Registers the current user to a standard assessment"""
  createStandardAssessment(semesterModuleId: ID!, data: AssessmentCreateInput!): Assessment

  """
  Registers the current user to an alternative assessment by submitting a proposal
  """
  createAlternativeAssessment(semesterModuleId: ID!, data: AssessmentCreateInput!): Assessment

  """Registers the current user to a foundation assessment"""
  createFoundationAssessment(semesterModuleId: ID!, data: AssessmentCreateInput!): Assessment

  """Registers the current user to a STS assessment"""
  createStsAssessment(semesterModuleId: ID!, data: AssessmentCreateInput!): Assessment

  """Updates an assessments details"""
  updateAssessment(assessmentId: ID!, data: AssessmentInput!): Assessment

  """Grade and review an assessment"""
  updateAssessmentDetails(assessmentId: ID!, data: AssessmentDetailsEditInput!): Assessment

  """
  Forwards an absent assessment to the examination office to determine whether the student in question was excused or not
  """
  forwardToExaminationOffice(assessmentId: ID!): Assessment

  """
  Mark an absent `assessment` as either excused or not excused and publish the result
  """
  resolveAbsence(assessmentId: ID!, assessmentStatus: AssessmentStatus!): Assessment

  """
  Mark multiple absent `assessment` as either excused or not excused and publish the result
  """
  batchResolveAbsence(assessments: [ID!]!, assessmentStatus: AssessmentStatus!): [Assessment]

  """Publish the result of an assessments"""
  publishAssessment(assessmentId: ID!): Assessment

  """Publish the result of multiple assessments"""
  batchPublishAssessments(assessments: [ID!]!): [Assessment]

  """Declines an alternative assessment proposal"""
  declineAssessmentProposal(assessmentId: ID!): Assessment

  """Accepts an alternative assessment proposal"""
  acceptAssessmentProposal(assessmentId: ID!, data: AssessmentProposalInput!): Assessment

  """
  Propose converting an already existing assessment into an early assessment
  """
  proposeEarlyAssessment(assessmentId: ID!, proposedDate: DateTime!): Assessment

  """
  Declines an ealry assessment request, converting the assessment back to a normal one
  """
  declineEarlyAssessment(assessmentId: ID!): Assessment

  """Schedules an early assesstment, effectively accepting the request"""
  scheduleEarlyAssessment(assessmentId: ID!, data: AssessmentProposalInput!): Assessment

  """Sets the assistant on the specified assessment"""
  setAssessmentHelper(assessmentId: ID!, userId: ID!): Assessment

  """Sets the assessor on the specified assessment"""
  setAssessmentAssessor(assessmentId: ID!, userId: ID!): Assessment

  """Removes the current assistant from the specified assessment"""
  removeAssessmentHelper(assessmentId: ID!): Assessment

  """Mark all the assessments as ready for publishing"""
  batchMarkReadyForPublishing(assessments: [ID!]!): [Assessment]
  addModuleToModuleHandbook(moduleId: ID!, moduleHandbookId: ID!, type: ModuleHandbookModuleType!): Boolean
  deleteModuleHandbookModule(moduleHandbookModuleId: ID!): Boolean
  updateModuleHandbookModule(moduleHandbookModuleId: ID!, data: ModuleHandbookModuleInput!): ModuleHandbookModule
  addModuleToSemester(moduleId: ID!, semesterId: ID!): Boolean
  assignLearningResourceToSemesterModule(semesterModuleId: ID!, learningResourceId: ID!): Module
  assignEventGroupToSemesterModule(semesterModuleId: ID!, eventGroupId: ID!): SemesterModule
  unassignLearningResourceFromSemesterModule(semesterModuleId: ID!, learningResourceId: ID!): Module
  unassignEventGroupFromSemesterModule(semesterModuleId: ID!, eventGroupId: ID!): SemesterModule
  updateSemesterModule(semesterModuleId: ID!, data: SemesterModuleInput!): SemesterModule
  proposeSemesterModuleChanges(semesterModuleId: ID!, semesterId: ID, moduleShortCode: String, data: SemesterModuleInput!): SemesterModule
  acceptSemesterModuleChanges(semesterModuleId: ID!): SemesterModule
  declineSemesterModuleChanges(semesterModuleId: ID!): Semester
  revokeAssessmentForSemesterModule(semesterModuleId: ID!): Boolean
  syncGitLabGroups: Boolean!
  createModuleHandbook(studyProgramId: ID!, data: ModuleHandbookInput!): ModuleHandbook
  updateModuleHandbook(moduleHandbookId: ID!, studyProgramId: ID!, data: ModuleHandbookInput!): ModuleHandbook
  linkModuleHandbookToUser(moduleHandbookId: ID!, userId: ID!): StudentModuleHandbook
  createModule(data: ModuleInput!): Module
  updateModule(moduleId: ID!, data: ModuleInput!): Module
  addComment(content: String!, updateId: ID!): UpdateComment
  createProject(data: CreateProjectInput!): Project!
  updateProject(data: UpdateProjectInput!, id: ID!): Project!
  archiveProject(id: ID!): Boolean!
  unarchiveProject(id: ID!): Boolean!
  setProjectSponsor(id: ID!, projectSponsorId: ID): Boolean!
  makeProjectOfficial(id: ID!): Boolean!
  inviteUsersToProject(users: [ProjectInviteUserInput!]!, projectId: ID!): Boolean
  acceptProjectInvite(projectId: ID!): Boolean
  declineProjectInvite(projectId: ID!): Boolean
  createTag(name: String!, category: TagCategory): Tag

  """Create a new learning resource"""
  createLearningResource(data: LearningResourceInput!): LearningResource

  """Update a learning resource"""
  updateLearningResource(learningResourceId: ID!, data: LearningResourceInput!): LearningResource

  """Delete a learning resource"""
  deleteLearningResource(learningResourceId: ID!): Boolean
  markNotificationRead(id: ID!): Notification!
  updateEventAttendance(attendanceId: ID!, status: EventAttendanceStatus!): EventAttendance!

  """Leave an event"""
  leaveEvent(eventId: ID!): Event

  """Rejoin an event"""
  rejoinEvent(eventId: ID!): Event

  """Add an event to an event group"""
  addEventToGroup(eventId: ID!, eventGroupId: ID!): Event

  """Remove an event from an event group"""
  removeEventFromGroup(eventId: ID!): Event

  """Add a host to an event in an event group"""
  updateEventHost(eventId: ID!, hostId: ID!): Event

  """Create an event group"""
  createEventGroup(data: EventGroupInput!): EventGroup!

  """Update event group details"""
  updateEventGroup(eventGroupId: ID!, data: EventGroupInput!): EventGroup!

  """Register for an event group"""
  registerForEventGroup(eventGroupId: ID!): Boolean!

  """Leave an event group"""
  unregisterFromEventGroup(eventGroupId: ID!): Boolean!

  """Delete an event group"""
  deleteEventGroup(eventGroupId: ID!): Boolean!

  """Check if the given Slack name is available"""
  checkSlackChannelNameAvailable(channelName: String!): Boolean!

  """Add a Slack channel to an event group"""
  addSlackChannel(eventGroupId: ID!, channelId: String, channelName: String): EventGroup!

  """Archive Slack channel for an event group"""
  archiveSlackChannel(eventGroupId: ID!): EventGroup!

  """Add a participant to an event group"""
  addParticipantToEventGroup(eventGroupId: ID!, participantId: ID!): Boolean!

  """Remove a participant from an event group"""
  removeParticipantFromEventGroup(eventGroupId: ID!, participantId: ID!): Boolean!
  updateSemester(semesterId: ID!, data: SemesterUpdateInput!): Semester
  createImportantSemesterDate(data: ImportantSemesterDateCreateInput!): ImportantSemesterDate
  editImportantSemesterDate(id: ID!, data: ImportantSemesterDateCreateInput!): ImportantSemesterDate
  deleteImportantSemesterDate(id: ID!): Boolean
  createSemester(data: SemesterCreationInput!): Semester

  """Sign in the user using email and password and return a JWT token."""
  signin(email: String!, password: String!): AuthPayload

  """
  Sign in the user using the Google OAuth mechanism. See
  [here](https://developers.google.com/identity/sign-in/web/reference). Takes
  the code returned after the Google sign in process on the frontend and
  validates the user based on that. Returns a token
  """
  googleSignin(code: String!): AuthPayload

  """Sets the current users push notification token"""
  setPushNotificationToken(token: String): Boolean

  """Invalidates the auth token of the current user"""
  invalidateAuthTokens: Boolean

  """Create a new user"""
  signup(signup: PartnerSignupInput!): Boolean

  """Sends a password reset email to the user with the email specified"""
  forgotPassword(email: String!): Boolean

  """
  Sets a new password for the user identified by the `set` token in the payload
  """
  setPassword(password: String!, set: String!): AuthPayload

  """Updates a users profile"""
  updateUserProfile(userId: ID!, data: UpdateUserProfileInput!): User

  """Sync Slack user IDs"""
  syncSlackUsers: Boolean!
  updateUser(id: ID!, data: UserInput!): User
  createUser(data: UserInput!): User
  deleteJourneyDocument(id: ID!): Boolean
  deleteObject(awsKey: String!): Boolean!
  sendBugReport(data: SendBugReportInput!): Boolean!

  """Submit a hand-in"""
  submitHandin(handinId: ID!, data: [UserFormComponentsInput!]!): UserHandin

  """Update hand-in feedback"""
  updateHandin(handinId: ID!, data: UpdateHandinInput!): UserHandin

  """Create a new hand-in"""
  createModuleHandin(data: ModuleHandinInput!, isPublished: Boolean = false): ModuleHandin!

  """Update hand-in details"""
  updateModuleHandin(moduleHandinId: ID!, data: ModuleHandinInput!, isPublished: Boolean = false): ModuleHandin!
  duplicateModuleHandin(moduleHandinId: ID!): ModuleHandin

  """student mutation to book office hour"""
  bookOfficeHours(eventId: String!, profEmail: String!): Boolean!

  """prof mutation to create office hour"""
  createOfficeHour(data: OfficeHourInput!): Boolean!

  """prof mutation to edit office hour"""
  updateOfficeHour(googleEventId: ID!, data: OfficeHourInput!): Boolean!

  """prof mutation to delete office hour"""
  deleteOfficeHour(googleEventId: ID!): Boolean!
  createOfficeHourGroup(data: OfficeHourGroupInput!): OfficeHourGroup!
  updateOfficeHourGroup(officeHourGroupId: ID!, data: OfficeHourGroupInput!): OfficeHourGroup!
  deleteOfficeHourGroup(officeHourGroupId: ID!): Boolean!
}

"""
Represents a module the user has already been assessed in, paired with all the associated assessments
"""
type MyStudiesModule {
  title: String!
  shortCode: String!
  moduleIdentifier: String
  simpleShortCode: String
  coordinator: User
  status: String
  highestGradeFeedback: String
  highestGrade: String
  assessments: [Assessment!]
  moduleType: ModuleHandbookModuleType
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""Represents the ects score that the user has collected"""
type MyStudyData {
  id: ID!

  """The total count of completed capstone projects"""
  capstoneECTS: Int

  """The total amount of capstone modules needed for graduation"""
  capstoneECTSNeeded: Int

  """The total count of completed theses"""
  thesisECTS: Int

  """The total amount of thesis modules needed for graduation"""
  thesisECTSNeeded: Int

  """The total count of passed orientation modules"""
  orientationECTS: Int

  """The total amount of orientation modules needed for graduation"""
  orientationECTSNeeded: Int

  """The total count of passed sts modules"""
  stsECTS: Int

  """The total amount of sts modules needed for graduation"""
  stsECTSNeeded: Int

  """The total count of passed optional modules"""
  optionalECTS: Int

  """The total count of passed mandatory modules"""
  mandatoryECTS: Int

  """The total amount of mandatory modules needed for graduation"""
  mandatoryECTSNeeded: Int

  """Total compulsory elective ECTS obtained"""
  compulsoryElectiveECTS: Int

  """The total amount of compulsory elective ECTS needed"""
  electiveECTSNeeded: Int

  """The total count of passed modules"""
  totalModuleCount: Int

  """The study program of the logged in user"""
  studyProgram: String

  """The total score of collected ects"""
  score: Int
}

type NavLink {
  label: String!
  link: String!
  icon: String!
  disabled: Boolean
  whitelistedRoles: [String!]!
}

type Notification {
  """This notifactions title/header text"""
  title: String!

  """This notifcations body text/longer form message"""
  label: String!

  """A link to the resource affected by the notification"""
  link: String

  """Notates whether this notification has benn read yet."""
  read: Boolean

  """The urgency category of this notification"""
  urgency: NotificationUrgency!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""Possible urgency categories for notifications"""
enum NotificationUrgency {
  INFO
  IMPORTANT
  URGENT
}

type OfficeHourGroup {
  id: ID!
  title: String!
  template: String
  user: User
  type: OfficeHourGroupType!
  customItems: [String!]!
}

input OfficeHourGroupInput {
  title: String!
  template: String
  type: OfficeHourGroupType!
  customItems: [String!]!
}

enum OfficeHourGroupType {
  PROJECT
  ACADEMIC_EVENT
  EVENT
  CUSTOM
  ALL
}

input OfficeHourInput {
  eventTime: GoogleWeeklyEventsInput!
  officeHourGroupId: String!
  location: String!
  description: String
}

"""Input Object used to paginate list results"""
input PaginationInput {
  """The desired number of elements returned per page"""
  pageSize: Int! = 20

  """The last known result's id, all result will be fetched after."""
  after: ID
}

type PartnerCompany {
  id: String!
  slug: String!
  domain: String!
  color: String!
  logoUrl: String!
}

input PartnerSignupInput {
  email: String!
  firstName: String!
  lastName: String!
  department: String!
  title: String!
  bio: String
  linkedin: String
  companySlug: String!
}

type Project {
  title: String!
  isLookingForTeammates: Boolean
  description: String!
  coverUrl: String
  outline: String
  isArchived: Boolean!
  isApproved: Boolean!
  originator: User
  sponsor: User
  memberships: [ProjectMembership!]
  tags: [Tag!]!
  updates: [ProjectUpdate!]!
  semesters: [Semester!]
  activeMemberships: [ProjectMembership!]
  invites: [ProjectInvite!]
  grants: [String!]
  isFutureProject: Boolean
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProjectFilter {
  """Fulltext search string"""
  search: String

  """Show only official CODE projects"""
  officialProject: Boolean

  """Show projects that are archived"""
  showArchived: Boolean

  """Show projects that are still looking for teammates"""
  isLookingForTeammates: Boolean

  """Show projects that are part of x semester"""
  semester: String

  """Show only projects that were created by the current user"""
  myProjects: Boolean
}

input ProjectInput {
  title: String!
  description: String
}

type ProjectInvite {
  user: User
  sender: User
  project: Project
  isSponsor: Boolean
  role: String
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""Project invite user input"""
input ProjectInviteUserInput {
  """The userId of the user to be added to this project"""
  userId: ID!

  """Role this user is expected to play while working on this project"""
  role: String!

  """
  Boolean indicating whether or not this invited user is a project sponsor
  """
  isSponsor: Boolean!
}

type ProjectMembership {
  role: String
  startDate: DateTime!
  endTime: DateTime
  isOwner: Boolean
  student: User
  project: Project
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum ProjectRequirements {
  OPTIONAL
  ANY
  OFFICIAL
}

input ProjectTeamMemberInput {
  id: String!
  name: String!
  avatarUrl: String!
  role: String!
  startDate: String
}

type ProjectUpdate {
  title: String!
  content: String!
  imageUrls: [String!]!
  needsHelp: Boolean!
  needsFeedback: Boolean!
  allowComments: Boolean!
  tags: [Tag!]!
  user: User
  comments: [UpdateComment!]!
  project: Project
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProjectUpdateFilter {
  """Fulltext search string"""
  search: String

  """Fulltext search string for tags"""
  tagSearch: String

  """Show projects update that needs help"""
  needHelp: Boolean

  """Show projects update that needs feedback"""
  needFeedback: Boolean
}

input ProjectUpdateInput {
  title: String!
  content: String!
  needsHelp: Boolean
  needsFeedback: Boolean
  allowComments: Boolean!
  tags: [String!]
}

enum ProposalStatus {
  PROPOSED
  REGISTERED
  DECLINED
  SCHEDULED
  REVOKED
  ASSESSING
}

type PublishedModuleHandin {
  id: ID

  """Amount of tasks that are yet to be submitted"""
  outstandingHandins: Int

  """Amount of submitted tasks"""
  submittedHandins: Int
  moduleHandin: ModuleHandin
}

input PublishedModuleHandinFilter {
  """Fulltext search string"""
  search: String

  """Only show handins that were created by me"""
  publishedByMe: Boolean

  """Show all Handins related to specific module"""
  module: ID

  """Show all Handins related to specific semesterModule"""
  semesterModule: ID
}

type Query {
  underMaintanance: Boolean!
  globalSearch(query: String): SearchResult
  mySettings: UserSettings

  """get project updates by project id"""
  projectUpdatesByProject(projectId: ID): [ProjectUpdate!]

  """get all project updates"""
  projectUpdates(pagination: PaginationInput, filter: ProjectUpdateFilter): [ProjectUpdate!]
  projectUpdatesTags: [Tag!]
  studyPrograms: [StudyProgram!]!

  """Get a single assessment with the given assessmentId"""
  assessment(assessmentId: ID!): Assessment

  """List assessments for a particular user filterable by proposalStatus"""
  assessments(proposalStatus: ProposalStatus): [Assessment!]!

  """List forwarded assessments for a given user"""
  forwardedAssessments(pagination: PaginationInput, filter: AssessmentFilter): [Assessment!]!

  """Get a list of upcoming assessments for a user"""
  myUpcomingAssessments(pagination: PaginationInput): [Assessment!]!

  """List user's assessments"""
  myAssessments(pagination: PaginationInput, filter: AssessmentFilter, assessmentStyle: AssessmentStyle, proposalStatus: ProposalStatus): [Assessment!]!

  """List early assessment proposals for a given user"""
  earlyAssessmentProposals(pagination: PaginationInput, filter: AssessmentFilter): [Assessment!]!

  """Get a list of published assessments"""
  myPublishedAssessments(moduleId: ID): [Assessment!]!

  """Get assessment statistics"""
  assessmentStatistics: AssessmentStatistics

  """Get assessment statistics for a given user"""
  myAssessmentStatistics: AssessmentStatistics

  """Get module and assessment statistics"""
  moduleAndAssessmentStatistics: [ModuleAndAssessmentStatistic!]

  """Get module and assessment proposal statistics"""
  moduleAndAssessmentProposalStatistics: [ModuleAndAssessmentProposalStatistic!]

  """Get ECTS statistics"""
  ectsStatistics: [EctsStatistic!]
  moduleHandbookModule(moduleHandbookModuleId: ID!): ModuleHandbookModule!
  moduleHandbookModules: [ModuleHandbookModule!]!
  moduleHandbookModulesByHandbook(moduleHandbookId: ID!): [ModuleHandbookModule]
  semesterModule(semesterModuleId: ID, moduleIdentifier: String, moduleShortCode: String): SemesterModule
  semesterModules(moduleHandbookId: ID, currentSemesterOnly: Boolean = false): [SemesterModule!]!
  activeSemesterModule(semesterModuleId: ID!): SemesterModule
  semesterModulesBySemester(semesterId: ID!, pagination: PaginationInput, filter: SemesterModuleFilter): [SemesterModule]
  professorSemesterModules: [SemesterModule]
  mySemesterModules(pagination: PaginationInput, filter: SemesterModuleFilter): [ViewerSemesterModule]
  currentSemesterModules(pagination: PaginationInput, filter: SemesterModuleFilter): [ViewerSemesterModule!]
  latestModuleDescription(semesterModuleId: ID!, semesterId: ID, moduleShortCode: String): SemesterModule
  moduleHandbook(moduleHandbookId: ID!): ModuleHandbook!
  moduleHandbooks(pagination: PaginationInput, filter: ModuleHandbookFilter): [ModuleHandbook!]!
  module(moduleId: ID!): Module!
  modules(pagination: PaginationInput, filter: ModuleFilter = {}, currentSemesterOnly: Boolean = false): [Module!]!

  """
  Returns all modules the user has been assessed in so far along with all published assessments
  """
  myStudies(pagination: PaginationInput, filter: ModuleFilter): [MyStudiesModule]

  """
  Returns a count of all modules that have been passed and ects that was collected.
  """
  myModuleData(onlyMandatory: Boolean = false): MyStudyData
  project(projectId: ID!): Project!
  projects(pagination: PaginationInput, filter: ProjectFilter): [Project!]!
  myProjects: [Project!]
  myProjectsAvailableForAssessments(semesterModuleId: ID!, assessmentStyle: AssessmentStyle!): [Project!]
  projectInvites(pagination: PaginationInput): [ProjectInvite!]!
  department(departmentId: ID!): Department!
  departments: [Department!]!
  tags(category: TagCategory): [Tag!]!

  """Get details of a learning resource"""
  learningResource(learningResourceId: ID!): LearningResource!

  """List learning resources"""
  learningResources: [LearningResource!]!

  """List unassigned learning resources by semester module ID"""
  unassignedLearningResourcesByModule(semesterModuleId: ID!, pagination: PaginationInput, filter: LearningResourceFilter): [LearningResource!]!

  """
  Get a presigned S3 upload URL to be used in the frontend to upload a learning resource file
  """
  presignedLearningResourceUploadUrl(createdAt: String!, fileName: String!, mimeType: String!): String

  """Get a signed S3 URL used to download a learning resource file"""
  signedLearningResourceLink(createdAt: String!, key: String!): String

  """Returns the users most recent six `Notification`s"""
  myNotifications: [Notification!]!
  eventAttendances(eventId: ID!): [EventAttendance!]

  """Get details of a single event"""
  event(eventId: ID!): Event!

  """List events visible to the currently logged in user"""
  events: [Event!]!

  """List unassigned events accessible by the currently logged in user"""
  unassignedEvents: [Event!]!

  """List all upcoming events visible to the currently logged in user"""
  upcomingEvents: [Event!]!

  """
  List upcoming events that concern the currently logged in user - where the user is an event organizer or attendee
  """
  myUpcomingEvents(pagination: PaginationInput): [Event]

  """List upcoming academic events"""
  academicEvents: [Event]

  """List upcoming non-academic events"""
  nonAcademicEvents: [Event]

  """Get details of an event group by event group ID"""
  eventGroup(eventGroupId: ID!): EventGroup!

  """Get the total number of event groups in a category"""
  eventGroupsCount(category: EventGroupCategory): Int!

  """List event groups"""
  eventGroups(type: EventGroupType, pagination: PaginationInput, filter: EventGroupFilter, organizing: Boolean, attending: Boolean): [EventGroup!]!

  """
  Lists event groups of the current user - where current user is organizer or is attending
  """
  myEventGroups(departmentAbbreviation: String, currentSemesterOnly: Boolean, filter: EventGroupFilter): [EventGroup!]!

  """Get all event groups which have no related modules"""
  unassignedEventGroupsByModule(semesterModuleId: ID!, pagination: PaginationInput): [EventGroup!]!
  semester(semesterId: ID!): Semester
  semesters(pagination: PaginationInput, fromCurrentSemester: Boolean, fromPreviousSemester: Boolean): [Semester!]!
  currentSemester: Semester
  nextSemester: Semester
  importantSemesterDate(id: ID!): ImportantSemesterDate

  """Get a user's details based on the user's ID"""
  user(userId: ID!): User!

  """List all registered users"""
  users(pagination: PaginationInput, filter: UserFilter): [User!]!

  """Returns the number of users in the database"""
  userCount: Int!

  """List all module current coordinators"""
  coordinatorUsers: [User!]!

  """List all students"""
  students(pagination: PaginationInput, filter: StudentFilter): [User!]!

  """Get the currently logged in user's details"""
  me: User!
  putObjectUrl(createdAt: String!, fileName: String!, mimeType: String!, uploadTarget: String!): String
  getObjectUrl(awsKey: String!): String!

  """Returns all distinct user skills"""
  userSkills: [UserSkill!]!
  partnerCompany(slug: String!): PartnerCompany
  getBugReports: [BugReport!]!
  auditEntries(type: String!, id: ID!): [AuditEntry!]!

  """List all unsubmitted hand-ins for this user"""
  currentHandins(pagination: PaginationInput, filter: ModuleHandinFilter): [UserHandin!]!

  """List all of the current user's hand-in submissions"""
  submittedHandins(pagination: PaginationInput, filter: ModuleHandinFilter): [UserHandin!]!

  """List all handins that can be assessed by the current user"""
  userHandinsTable(pagination: PaginationInput, filter: UserHandinTableFilter): [UserHandin!]!

  """Get details of a single hand-in submission"""
  userHandin(handinId: ID!): UserHandin

  """Gets the semester wide hand-in deadlines as an object"""
  handinDeadlines: HandinDeadlines

  """Get details of a hand-in"""
  moduleHandin(moduleHandinId: ID!): ModuleHandin

  """Get all published hand-ins / hand-ins visible to the current user"""
  publishedModuleHandins(pagination: PaginationInput, filter: PublishedModuleHandinFilter): [PublishedModuleHandin!]

  """
  querying all of the user google events at a specific week and checking if the events are office hour 
  """
  allGoogleEvents(week: GoogleWeeklyEventsInput): [GoogleEvent!]!

  """querying all of the OfficeHourGroups of a prof"""
  officeHourGroups: [OfficeHourGroup!]
}

type RecentSearchResult {
  user: User
  resultId: ID!
  resultType: RecentSearchResultType!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RecentSearchResultObject {
  type: RecentSearchResultType!
  event: EventGroup
  academicEvent: EventGroup
  module: SemesterModule
  user: User
  project: Project
}

enum RecentSearchResultType {
  PROJECT
  EVENT
  ACADEMIC_EVENT
  USER
  MODULE
}

enum ResourceMedium {
  BOOK
  VIDEO
  COURSE
  ARTICLE
  AUDIO
  MISC
  META
}

"""The result of a global search"""
type SearchResult {
  projects: [Project]
  events: [EventGroup]
  academicEvents: [EventGroup]
  modules: [SemesterModule]
  users: [User]
}

type Semester {
  name: String!
  isActive: Boolean!
  startDate: DateTime!
  endDate: DateTime!
  moduleStandardRegistrationStartDate: DateTime
  moduleStandardRegistrationEndDate: DateTime
  moduleAlternativeRegistrationStartDate: DateTime
  moduleAlternativeRegistrationEndDate: DateTime
  moduleEarlyRegistrationStartDate: DateTime
  moduleEarlyRegistrationEndDate: DateTime
  moduleAssessmentPhaseStartDate: DateTime
  moduleAssessmentPhaseEndDate: DateTime
  moduleReassessmentRegistrationPhaseStartDate: DateTime
  moduleReassessmentRegistrationPhaseEndDate: DateTime
  moduleReassessmentPhaseStartDate: DateTime
  moduleReassessmentPhaseEndDate: DateTime
  moduleGradePublishedDeadline: DateTime
  moduleEditDeadline: DateTime
  projectApplicationPhaseStartDate: DateTime
  projectApplicationPhaseEndDate: DateTime
  projectIdeaHandInStartDate: DateTime
  projectIdeaHandInEndDate: DateTime
  projectOutlineHandInStartDate: DateTime
  projectOutlineHandInEndDate: DateTime
  barcampSlotBookingStartDate: DateTime
  barcampSlotBookingEndDate: DateTime
  academicEventRegistrationStartDate: DateTime
  academicEventRegistrationEndDate: DateTime
  pppStartDate: DateTime
  pppEndDate: DateTime
  handinIdDeadline: DateTime
  handinIsDeadline: DateTime
  handinOsDeadline: DateTime
  handinPmDeadline: DateTime
  handinSeDeadline: DateTime
  handinStsDeadline: DateTime
  handinCustomDeadline: JSON
  projects: [Project!]
  nextSemester: Semester
  previousSemester: Semester
  isOutlineHandinActive: Boolean!
  activeStandardRegistrationPhase: Boolean
  activeAlternativeRegistrationPhase: Boolean
  activeEarlyAssessmentRegistrationPhase: Boolean
  activeReassessmentRegistrationPhase: Boolean
  activeAcademicEventRegistrationPhase: Boolean
  activePPP: Boolean
  activeModuleEdit: Boolean
  isPitchActive: Boolean!
  importantSemesterDates(filter: ImportantSemesterDateFilter): [ImportantSemesterDate]
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input SemesterCreationInput {
  name: String!
  abbreviation: String
  startDate: DateTime!
  endDate: DateTime!
}

enum SemesterDateVisibility {
  STUDENT_ONLY
  FACULTY_ONLY
  ALL
}

type SemesterModule {
  description: String!
  levelExpectations: String!
  standardAssessmentInstructions: String!
  alternativeAssessmentInstructions: String!
  moduleIdentifier: String
  foundationAssessmentInstructions: String
  earlyAssessmentInstructions: String
  allowsEarlyAssessment: Boolean
  allowsFoundationAssessment: Boolean
  disabledAlternativeAssessment: Boolean
  earlyOnly: Boolean
  isDraft: Boolean
  projectRequirement: ProjectRequirements
  primaryAssessor: User
  module: Module
  semester: Semester
  eventGroups: [EventGroup!]!
  updates: [ModuleUpdate!]!
  isNotEdited: Boolean!
  hasDuplicate: Boolean
  nextModules: [SemesterModule!]!
  slackLink: String
  grants: [String]
  currentAssessment: Assessment
  status: String
  currentAssessmentStyle: AssessmentStyle
  highestGrade: String
  latestAssessment(declined: Boolean): Assessment
  availableForFoundation: Boolean
  registrationCount(assessmentStyle: AssessmentStyle!): Int
  openProposalCount: Int
  versions: [ViewerSemesterModule]
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input SemesterModuleFilter {
  """Fulltext search string"""
  search: String

  """Show only modules which are mandatory/elective for the current user"""
  onlyMandatory: Boolean

  """Show only modules belonging to the respective department"""
  department: String

  """Show only modules coordinated by the given user"""
  coordinator: ID

  """Show only modules passed by the current user"""
  passed: Boolean

  """Show only modules failed by the current user"""
  failed: Boolean

  """Abbreviation of the semester, usually `(FS/SS){Year}"""
  semester: String
}

input SemesterModuleInput {
  description: String!
  levelExpectations: String!
  standardAssessmentInstructions: String!
  alternativeAssessmentInstructions: String!
  foundationAssessmentInstructions: String!
  earlyAssessmentInstructions: String
  allowsEarlyAssessment: Boolean
  earlyOnly: Boolean
  allowsFoundationAssessment: Boolean
  allowsAlternativeAssessment: Boolean
  projectRequirement: ProjectRequirements!
  primaryAssessor: ID
}

input SemesterModuleMCInput {
  eventGroups: [String!]!
}

input SemesterModuleUpdateInput {
  content: String!
}

input SemesterUpdateInput {
  name: String!
  isActive: Boolean!
  startDate: DateTime!
  endDate: DateTime!
  nextSemester: ID
  moduleStandardRegistrationStartDate: DateTime
  moduleStandardRegistrationEndDate: DateTime
  moduleAlternativeRegistrationStartDate: DateTime
  moduleAlternativeRegistrationEndDate: DateTime
  moduleEarlyRegistrationStartDate: DateTime
  moduleEarlyRegistrationEndDate: DateTime
  moduleAssessmentPhaseStartDate: DateTime
  moduleAssessmentPhaseEndDate: DateTime
  moduleReassessmentRegistrationPhaseStartDate: DateTime
  moduleReassessmentRegistrationPhaseEndDate: DateTime
  moduleReassessmentPhaseStartDate: DateTime
  moduleReassessmentPhaseEndDate: DateTime
  moduleGradePublishedDeadline: DateTime
  moduleEditDeadline: DateTime
  projectApplicationPhaseStartDate: DateTime
  projectApplicationPhaseEndDate: DateTime
  projectIdeaHandInStartDate: DateTime
  projectIdeaHandInEndDate: DateTime
  projectOutlineHandInStartDate: DateTime
  projectOutlineHandInEndDate: DateTime
  barcampSlotBookingStartDate: DateTime
  barcampSlotBookingEndDate: DateTime
  academicEventRegistrationStartDate: DateTime
  academicEventRegistrationEndDate: DateTime
  pppStartDate: DateTime
  pppEndDate: DateTime
  handinSeDeadline: DateTime
  handinIdDeadline: DateTime
  handinPmDeadline: DateTime
  handinIsDeadline: DateTime
  handinOsDeadline: DateTime
  handinStsDeadline: DateTime
  handinCustomDeadline: [HandinCustomDeadlineInput!]
}

input SendBugReportInput {
  description: String!
  expectedBehavior: String!
  deviceInfo: String!
  stepsToReproduce: String!
  additionalContext: String!
  screenshots: [AwsKeyList!]
}

input StudentFilter {
  search: String
  department: String
}

type StudentModuleHandbook {
  acceptedAt: DateTime!
  rejectedAt: DateTime
  student: User
  moduleHandbook: ModuleHandbook
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StudyProgram {
  name: String!
  abbreviation: String!
  description: String
  backgroundImageUrl: String
  moduleHandbooks: [ModuleHandbook!]
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Tag {
  name: String!
  skills: [UserSkill!]!
  category: TagCategory
  skillCount: Int!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""Possible categories tags can fall into."""
enum TagCategory {
  GENERAL
  METHOD
  TOOL
  RESOURCE
  TECHNOLOGY
}

enum TeachingFormat {
  LECTURE
  SEMINAR_OR_WORKSHOP
  PROJECT_WORK
  CASE_STUDY
  PRACTICE_SESSION
  COLLOQUIUM
  BACHELORS_THESIS
  COURSE
  SEMINAR
}

input UnofficialProjectInput {
  title: String!
  description: String!
  tags: [String!]!
}

type UpdateComment {
  content: String!
  update: ProjectUpdate
  user: User
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UpdateHandinInput {
  handinFeedback: String
  assessmentFeedback: String
  grade: Float
  attendedOralExam: Boolean
  requiresOralAssessment: Boolean
}

input UpdateProjectInput {
  title: String!
  coverUrl: String
  description: String!
  outline: String!
  sponsor: ID
  isLookingForTeammates: Boolean!
  tags: [String!]
  semesters: [String!]!
  teamMembers: [ProjectTeamMemberInput!]
}

input UpdateUserProfileInput {
  githubHandle: String
  twitterHandle: String
  linkedInHandle: String
  bio: String
  phone: String
  avatarUrl: String
  skills: [UserSkillInput!]
}

input Upload {
  fileName: String!
  link: String!
  key: String!
  fileType: FileType!
}

type User {
  firstName: String!
  lastName: String!
  name: String!
  email: String!
  pushNotificationToken: String
  avatarUrl: String
  role: UserRole!
  slackId: String
  bio: String
  phone: String
  moduleHandbooks: [StudentModuleHandbook!]
  eventGroupParticipations: [EventGroupParticipations!]!
  projectMemberships: [ProjectMembership!]!
  skills: [UserSkill!]!
  inactive: Boolean
  githubHandle: String
  linkedInHandle: String
  twitterHandle: String
  moduleHandIns: [ModuleHandin!]
  permissions: JSON
  slackLink: String

  """List the current users's mandatory modules"""
  mandatoryModules: [String!]

  """
  Whether or not the currently logged in user can edit this user's details
  """
  canEdit: Boolean

  """
  Whether or not the currently logged in user can view this user's details
  """
  canViewDetails: Boolean

  """List the grants available to this user"""
  grants: [String!]!

  """List the currently logged in user's recent search results"""
  recentSearchResults: [RecentSearchResultObject!]
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserFilter {
  search: String
  role: UserRole
  tagSearch: String
}

type UserFormComponent {
  id: ID!
  handinFormComponent: FormComponent
  content: String!
}

input UserFormComponentsInput {
  handinFormComponent: ID!
  content: String!
}

type UserHandin {
  deadline: DateTime
  submittedAt: DateTime
  user: User
  userFormComponents: [UserFormComponent!]!
  feedback: String
  handin: ModuleHandin

  """
  Gets the latest assessment associated with the module linked to this hand-in
  """
  latestAssessment: Assessment

  """
  Current status of the hand-in - whether or not feedback has been given or if the hand-in has been submitted etc.
  """
  status: String!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserHandinTableFilter {
  """Show all hand ins from a user with this name"""
  name: String

  """Show all userHandins from this moduleHandin"""
  handin: ID

  """Show all Handins related to specific module"""
  module: ID

  """Show all Handins related to specific event"""
  event: ID

  """Show all Handins related to specific semester"""
  semester: ID

  """Show all Handins with a certain status"""
  status: ID
}

input UserInput {
  firstName: String!
  lastName: String!
  role: UserRole!
  inactive: Boolean!
  email: String!
  skills: [UserSkillInput!]
}

"""Access/Account Level Roles a user can assume"""
enum UserRole {
  ADMIN
  STAFF
  PROFESSOR
  WORKING_STUDENT
  STUDENT
  ORIENTATION_STUDENT
  FUTURE_STUDENT
  APPLICANT
  PARTNER
  LECTURER
  EXAMINATION_OFFICE
  HEAD_OF_PROJECTS
  RELATIONS_MANAGER
}

type UserSettings {
  assessmentEmailsEnabled: Boolean!
  calendarLink: String
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSkill {
  id: ID!
  user: User
  skill: Tag
  isHighlighted: Boolean
}

input UserSkillInput {
  name: String!
  isHighlighted: Boolean
}

"""This module type is returned if the viewer coordinates this module."""
type ViewerCoordinatedSemesterModule implements ViewerSemesterModule {
  """The unique id for this semester module."""
  id: ID!

  """The timestamp of the moment when this semester module was created."""
  createdAt: DateTime

  """
  The timestamp of the moment when this semester module was last updated.
  """
  updatedAt: DateTime

  """
  A large text describing everything the student needs to know about this  module. These
  instructions might be different each semester.
  """
  description: String

  """Indicates whether or not ths module is in draft status"""
  isDraft: Boolean

  """
  The module for this semster module. A semester module is a specific offering of a module
  during a certain semester. Which module is offered can be queried through this field.
  """
  module: Module

  """Module identifier for the semester module"""
  moduleIdentifier: String
  eventGroups: [EventGroup!]
  primaryAssessor: User
  semester: Semester
  hasDuplicate: Boolean

  """Number of alternative assessment proposals for this module."""
  openProposalsCount: Int

  """Number of alternative assessment proposals for this module."""
  openAssessmentsCount: Int
}

"""
This interface type is returned for semester modules. If a module is offered during a certain
semester, a new semester module enttity is created. It can be used to connect specific data
about this module during a semester.
"""
interface ViewerSemesterModule {
  """The unique id for this semester module."""
  id: ID!

  """The timestamp of the moment when this semester module was created."""
  createdAt: DateTime

  """
  The timestamp of the moment when this semester module was last updated.
  """
  updatedAt: DateTime

  """
  A large text describing everything the student needs to know about this  module. These
  instructions might be different each semester.
  """
  description: String

  """Indicates whether or not ths module is in draft status"""
  isDraft: Boolean

  """
  The module for this semster module. A semester module is a specific offering of a module
  during a certain semester. Which module is offered can be queried through this field.
  """
  module: Module

  """Module identifier for the semester module"""
  moduleIdentifier: String
  eventGroups: [EventGroup!]
  primaryAssessor: User
  semester: Semester
  hasDuplicate: Boolean
}

"""
This module type is returned if the viewer is enrolled in this module or has been enrolled in the past. Module
assessments can be taken again to improve the grade, therefore a module can have a passed grade and at the same
time be in a `REGISTERED` state.
"""
type ViewerTakenSemesterModule implements ViewerSemesterModule {
  """The unique id for this semester module."""
  id: ID!

  """The timestamp of the moment when this semester module was created."""
  createdAt: DateTime

  """
  The timestamp of the moment when this semester module was last updated.
  """
  updatedAt: DateTime

  """
  A large text describing everything the student needs to know about this  module. These
  instructions might be different each semester.
  """
  description: String

  """Indicates whether or not ths module is in draft status"""
  isDraft: Boolean

  """
  The module for this semster module. A semester module is a specific offering of a module
  during a certain semester. Which module is offered can be queried through this field.
  """
  module: Module

  """Module identifier for the semester module"""
  moduleIdentifier: String
  eventGroups: [EventGroup!]
  primaryAssessor: User
  semester: Semester
  hasDuplicate: Boolean
  status: String
  currentAssessment: Assessment
  latestAssessment(declined: Boolean): Assessment
  highestGrade: String
}

"""
This module is returned for modules, that are not taken or coordinated by the viewer. This is the type that acts as
a default case and only implements the standard fields if the interface.
"""
type ViewerUnassociatedSemesterModule implements ViewerSemesterModule {
  """The unique id for this semester module."""
  id: ID!

  """The timestamp of the moment when this semester module was created."""
  createdAt: DateTime

  """
  The timestamp of the moment when this semester module was last updated.
  """
  updatedAt: DateTime

  """
  A large text describing everything the student needs to know about this  module. These
  instructions might be different each semester.
  """
  description: String

  """Indicates whether or not ths module is in draft status"""
  isDraft: Boolean

  """
  The module for this semster module. A semester module is a specific offering of a module
  during a certain semester. Which module is offered can be queried through this field.
  """
  module: Module

  """Module identifier for the semester module"""
  moduleIdentifier: String
  eventGroups: [EventGroup!]
  primaryAssessor: User
  semester: Semester
  hasDuplicate: Boolean
}

